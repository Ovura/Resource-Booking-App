@page "/admin"

@using DataAccess
@using BlazorServerApp.Models

@inject IMySQLDataAccess _data
@inject IConfiguration _config

<div class="container">
    <section id="avail-appt-section">
        <h3>Curent Available Resources</h3>
        @if (availableResources == null)
        {
                <p><em>Loading ...</em></p>
        }
        else
        {
                <table class="table table-striped">
                    <thead style="background-color:#141e5e; color:white;">
                        <tr>
                            <th>Start Time</th>
                            <th>End Time</th>
                            <th>Reserved</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                    @foreach (var a in availableResources)
                    {
                                <tr>
                                    <td>@a.StartTime.ToLocalTime()</td>
                                    <td>@a.EndTime.ToLocalTime()</td>
                                    <td>@a.Reserved</td>
                                    <td>
                                @if (@a.Reserved == false)
                                {
                                                <span id="deleteRsrc" @onclick="() => DeleteResource(a.Id)" class="oi oi-x me-3"></span>
                                                <span id="editRsrc" @onclick="() => EditResource(a.Id)" class="oi oi-pencil"></span>
                                }
                                    </td>
                                </tr>

                    }
                    </tbody>
                </table>
            @if (deleteErrorMessage)
            {
                        <div class="alert alert-danger" role="alert">
                          Delete Action Failed!
                        </div>
                        <p>@dbErrorMessage</p>


            }
        }
    </section>

    <section id="create-appt" class="mt-5">
        @if (createStatus)
        {
                <h3>Add New Available Resource</h3>
                <EditForm Model="@newResource" OnValidSubmit="@InsertAppointment">
                    <DataAnnotationsValidator />
                    <ValidationSummary />
                    <div class="mb-3">
                        <label for="date" class="form-label">Date</label>
                        <input type="date" class="form-control" id="date" @bind-value="addResource.Date">
                    </div>
                    <div class="mb-3">
                        <label for="start-time" class="form-label">Start Time</label>
                        <input type="time" class="form-control" id="start-time" @bind-value="addResource.StartTime">
                    </div>
                    <div class="mb-3">
                        <label for="end-time" class="form-label">End Time</label>
                        <input type="time" class="form-control" id="end-time" @bind-value="addResource.EndTime">
                    </div>

                    <div class="d-grid gap-2">
                        <button type="submit" class="btn alert-primary mt-3">Add</button>
                    </div>

                </EditForm>
        }
    </section>

    <section id="edit-appt" class="mt-5">
        @if (editStatus)
        {
                <h3>Edit Existing Available Resource</h3>
                <EditForm Model="@newResource" OnValidSubmit="@UpdateResource">
                    <DataAnnotationsValidator />
                    <ValidationSummary />
                    <div class="mb-3">
                        <label for="date" class="form-label">Date</label>
                        <input type="date" class="form-control" id="date" @bind-value="addResource.Date">
                    </div>
                    <div class="mb-3">
                        <label for="start-time" class="form-label">Start Time</label>
                        <input type="time" class="form-control" id="start-time" @bind-value="addResource.StartTime">
                    </div>
                    <div class="mb-3">
                        <label for="end-time" class="form-label">End Time</label>
                        <input type="time" class="form-control" id="end-time" @bind-value="addResource.EndTime">
                    </div>

                    <div class="d-grid gap-2">
                        <button type="submit" class="btn alert-primary mt-3">Update</button>
                    </div>

                </EditForm>

        }
    </section>
</div>

@code {
    List<AvailableResourceModel>? availableResources;
    List<AvailableResourceModel>? thisResource;

    private AvailableResourceModel newResource = new AvailableResourceModel();


    // booleans to determine what to display in the UI
    bool createStatus = true;
    bool editStatus = false;
    bool deleteErrorMessage = false;

    // error message for db delete exception
    string dbErrorMessage = "";

    // variable to keep track of the current appt being edited
    int apptBeingEdited;


    public class AddResource
    {
        public DateTime Date { get; set; }
        public DateTime StartTime { get; set; }
        public DateTime EndTime { get; set; }
    }

    private AddResource addResource = new AddResource();

    // Load the initial data
    protected override async Task OnInitializedAsync()
    {
        string sql = "SELECT * FROM available_resource";
        availableResources = await _data.LoadData<AvailableResourceModel, dynamic>(sql, new { }, _config.GetConnectionString("MySQLConnection"));
    }

    // Insert Resources
    private async Task InsertAppointment()
    {
        AvailableResourceModel a = new AvailableResourceModel
            {
                StartTime = new DateTime(addResource.Date.Year, addResource.Date.Month, addResource.Date.Day, addResource.StartTime.Hour, addResource.StartTime.Minute, 0).ToUniversalTime(),
                EndTime = new DateTime(addResource.Date.Year, addResource.Date.Month, addResource.Date.Day, addResource.EndTime.Hour, addResource.EndTime.Minute, 0).ToUniversalTime(),
                StartDate = addResource.Date,
                CreatedAt = DateTime.UtcNow,
                UpdatedAt = DateTime.UtcNow,
                Reserved = false

            };

        string sql = "INSERT INTO available_resource (StartTime, EndTime, StartDate, CreatedAt, UpdatedAt, Reserved) VALUES (@StartTime, @EndTime, @StartDate, @CreatedAt, @UpdatedAt, @Reserved);";
        await _data.SaveData(sql, a, _config.GetConnectionString("MySqlConnection"));
        await OnInitializedAsync();
        a = new AvailableResourceModel();
        addResource = new AddResource();
    }

    // Delete Resource
    private async Task DeleteResource(int id)
    {
        string sql = "DELETE FROM available_resource WHERE Id = @Id";
        try
        {
            await _data.SaveData(sql, new { Id = id }, _config.GetConnectionString("MySqlConnection"));
            deleteErrorMessage = false;
            await OnInitializedAsync();
        }
        catch (Exception ex)
        {
            deleteErrorMessage = true;
            dbErrorMessage = ex.ToString();
        }
    }

    //Edit Resource
    private async Task EditResource(int id)
    {
        createStatus = false;
        editStatus = true;

        string sql = "SELECT * FROM available_resource WHERE Id = @Id";
        thisResource = await _data.LoadData<AvailableResourceModel, dynamic>(sql, new { Id = id }, _config.GetConnectionString("MySqlConnection"));
        apptBeingEdited = id;

        addResource.StartTime = thisResource[0].StartTime.ToLocalTime();
        addResource.EndTime = thisResource[0].EndTime.ToLocalTime();
        addResource.Date = thisResource[0].StartDate;
    }

    // Update Resource
    private async Task UpdateResource()
    {
        AvailableResourceModel a = new AvailableResourceModel
            {
                StartTime = new DateTime(addResource.Date.Year, addResource.Date.Month, addResource.Date.Day, addResource.StartTime.Hour, addResource.StartTime.Minute, 0).ToUniversalTime(),
                EndTime = new DateTime(addResource.Date.Year, addResource.Date.Month, addResource.Date.Day, addResource.EndTime.Hour, addResource.EndTime.Minute, 0).ToUniversalTime(),
                StartDate = addResource.Date,
                UpdatedAt = DateTime.UtcNow,
                Id = apptBeingEdited
            };

        string sql = "UPDATE available_resource SET StartTime = @StartTime, EndTime = @EndTime, StartDate = @StartDate, UpdatedAt = @UpdatedAt WHERE Id = @Id;";
        await _data.SaveData(sql, a, _config.GetConnectionString("MySqlConnection"));
        await OnInitializedAsync();

        createStatus = true;
        editStatus = false;

    }


}